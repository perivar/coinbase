import {
  createAsyncThunk,
  createSelector,
  createSlice,
} from '@reduxjs/toolkit';
import News from '../../models/News';
import { RootState } from '../store/store';

// https://www.newline.co/@bespoyasov/how-to-use-thunks-with-redux-toolkit-and-typescript--1e65fc64

// This type describes the error object structure:
type FetchNewsError = {
  message: string;
};

// The third type-parameter is an object with:
// `{dispatch?, state?, extra?, rejectValue?}`` fields.
//
// `extra` is useful when we need to pass
// some static data to the request function,
// like jwt-token or HTTP-headers.
//
// `rejectValue` is useful when we need to type
// possible errors.
export const fetchNews = createAsyncThunk<
  News[],
  void,
  { rejectValue: FetchNewsError }
>(
  'news/fetch',
  // The second argument, `thunkApi`, is an object
  // that contains all those fields
  // and the `rejectWithValue` function:
  // or use the deconstructed { rejectWithValue } value
  async (_, { rejectWithValue }) => {
    let newsData: News[] = [];

    try {
      // Fetch news from cryptocompare API
      const response = await fetch(
        'https://min-api.cryptocompare.com/data/v2/news/?lang=EN'
      );

      // Check if status is not okay:
      if (response.status !== 200) {
        // Return the error message:
        return rejectWithValue({
          message: 'Failed to fetch news.',
        });
      }

      const responseData = await response.json();

      // Get the five latest news articles
      for (const news of responseData.Data) {
        const formattedDate = new Date(news.published_on * 1000)
          .toString()
          .split(' ')
          .splice(1, 2)
          .join(' ');

        newsData.push(
          new News(
            news.source_info.name,
            formattedDate,
            news.title,
            news.imageurl,
            news.url
          )
        );
        if (newsData.length === 20) {
          break;
        }
      }
    } catch (err) {
      // You can choose to use the message attached to err or write a custom error
      // Return the error message:
      return rejectWithValue({
        message: 'Failed to fetch news: ' + err,
      });
    }

    return newsData;
  }
);

// here we are typing the types for the state
type NewsState = {
  loading: boolean;

  // `error` will contain an error message.
  error: string | null;
  newsData: News[];
};

const initialState: NewsState = {
  newsData: [],
  error: null,
  loading: false,
};

export const newsSlice = createSlice({
  name: 'news',
  initialState,
  reducers: {
    // leave this empty here
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere, including actions generated by createAsyncThunk or in other slices.
  // Since this is an API call we have 3 possible outcomes: pending, fulfilled and rejected. We have made allocations for all 3 outcomes.
  // Doing this is good practice as we can tap into the status of the API call and give our users an idea of what's happening in the background.
  extraReducers: builder => {
    // When we send a request,
    // `fetchNews.pending` is being fired:
    builder.addCase(fetchNews.pending, state => {
      // At that moment,
      // we change loading to true
      // and clear all the previous errors:
      state.loading = true;
      state.error = null;
    });

    // When a server responses with the data,
    // `fetchNews.fulfilled` is fired:
    builder.addCase(fetchNews.fulfilled, (state, { payload }) => {
      // We add all the new news into the state
      // and change `loading` back to `false`:
      state.newsData = payload;
      state.loading = false;
    });

    // When a server responses with an error:
    builder.addCase(fetchNews.rejected, (state, { payload }) => {
      // We show the error message
      // and change `loading` back to `false`:
      if (payload) state.error = payload.message;
      state.loading = false;
    });
  },
});

export const selectNews = (state: RootState) => state.news;

export const newsSelector = createSelector(selectNews, state => state);

export default newsSlice.reducer;
